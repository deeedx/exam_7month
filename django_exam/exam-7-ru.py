# "Вопросы категории ""Основы Django"":
# 1. Что такое Django и для чего он используется?

# ответ: Django — это бесплатный фреймворк для разработки веб-приложений на языке программирования Python. 

# 2. Какие основные преимущества использования Django веб-фреймворка?

# ответ:  Использование веб-фреймворка Django обладает множеством преимуществ, 
#   1. Продуктивность разработчика: Django предоставляет множество встроенных инструментов и шаблонов. 
# 2. Можно автомотически создавать SQL таблицы  3. Административная панель
#  4. Безопасность: Django предоставляет встроенные механизмы для обеспечения безопасности веб-приложений.  5.Многократкое использование приложений

# 3. Что такое шаблоны (templates) в Django и как они используются для создания веб-страниц?

# ответ: В Django шаблоны  представляют собой файлы, в которых указан HTML-код, содержащий вставки стимулирующих данных

# 4. Как настроить статические файлы (static files) в Django проекте?

# ответ:  чтобы соединить  статические файлы нужно написать в html     <link rel="stylesheet" href="{% static 'style.css' %}">

# 5. Как создать URL-путь в Django приложении и как он связывается с определенным представлением (view)?d

# ответ:  нужно создать функцию в views и импортировать в urls и с помощью функции path связываем  URL-путь
# пример функции

# def page(request):

#     return render(request,'page.html',context={}) 


# Вопросы категории ""Модели и базы данных"":

# 6. Что такое модели (models) в Django и как они связаны с базой данных?

# ответ: Модели в Django представляют собой классы, которые используются для описания структуры данных в базе данных. Они определяют имена полей, типы полей, значения по умолчанию и другие свойства данных.

# 7. Как создать модель в Django и какие типы полей поддерживаются в моделях?

# ответ:  CharField - хранит строку текста с определенной длиной.TextField - хранит неограниченную строку текста.IntegerField - хранит целое число.
# FloatField - хранит число с плавающей запятой.BooleanField - хранит значение True или False.DateField - хранит дату.
# пример как создать модель
# class Task(models.Model):
#     title = models.CharField(max_length=60)
#     description = models.TextField(max_length=500)
#     deadline = models.DateTimeField()


#     def __str__(self) -> str:
#         return self.title


# 8. Что такое миграции (migrations) в Django и как они используются для изменения схемы базы данных?

# ответ: Миграции в Django - это инструмент, который позволяет вам безопасно изменять схему базы данных вашего приложения. Миграции состоят из набора файлов Python, которые определяют изменения, которые вы хотите внести в базу данных.

# 9. Как выполнить запрос к базе данных с использованием моделей Django?

# ответ:  написать имя базы данных потом написать object.all
# пример кода
    # tasks = Task.objects.all()


# Вопросы категории ""Представления и маршруты (views and URLs)"":

# 10. Что такое представления (views) в Django и как они связаны с URL-адресами?

# ответ: В Django представления - это функции, которые отвечают за обработку запросов от пользователей и формирование ответов.

# 11. Как создать представление в Django и как передать данные из представления в шаблон (template)?

# ответ: Чтобы создать представление в Django, необходимо создать функцию, которая принимает запрос в качестве аргумента и возвращает ответ.

# 12. Как настроить URL-маршруты в Django проекте и как они связываются с представлениями?

# ответ:  с помощью функции path

# 13. Как передать параметры через URL в Django представлении?

# ответ: 
# Чтобы передать параметры через URL в Django представлении, необходимо использовать шаблон регулярного выражения в URL-маршруте. Шаблон регулярного выражения определяет, какие параметры должны быть переданы в представление.


# Вопросы категории ""Административная панель и авторизация"":
# 14. Как настроить административную панель (admin panel) в Django проекте?

# ответ:  

# 15. Как создать суперпользователя (superuser) для доступа к административной панели?

# ответ: написать в терминал python manage.py createsuperuser


# Практическое задание: Создание Django веб-приложения
# Задача:

# Создайте простое веб-приложение с использованием Django, которое включает в себя следующие компоненты:

# Модель (Model): Создайте модель Task, которая содержит поля title (название задачи) и description (описание задачи).

# Представление (View): Создайте представление для отображения списка всех задач и их деталей. Представление должно позволять добавлять новые задачи.

# Шаблоны (Templates): Создайте два шаблона - один для отображения списка задач и другой для отображения деталей конкретной задачи.

# URL-маршруты (URLs): Настройте URL-маршруты для обработки запросов к вашему веб-приложению.
